#EE 07.26.2017
#This pipeline will take you through nucleotide sequence processing and OTU clustering in mothur v.1.34.4. This pipeline generates files you will need to evaluate fungal peroxidase type, OTU richness, and OTU composition.
#Changes to August 2016 pipeline: bdiffs=1, pdiffs=3,maxhomop=6, minlength=359, maxlength=373, screen.seqs end=1431. Precluster with diffs=3.
#Step 1.  Split the fastq file into fasta and qual files.
fastq.info(fastq=perox1a.fastq, fasta=t, qfile=t, pacbio=t)
fastq.info(fastq=perox1b.fastq, fasta=t, qfile=t, pacbio=t)
fastq.info(fastq=perox2a.fastq, fasta=t, qfile=t, pacbio=t)
fastq.info(fastq=perox2b.fastq, fasta=t, qfile=t, pacbio=t)
fastq.info(fastq=perox3a.fastq, fasta=t, qfile=t, pacbio=t)
fastq.info(fastq=perox3b.fastq, fasta=t, qfile=t, pacbio=t)
fastq.info(fastq=perox4a.fastq, fasta=t, qfile=t, pacbio=t)
fastq.info(fastq=perox4b.fastq, fasta=t, qfile=t, pacbio=t)
fastq.info(fastq=perox5a.fastq, fasta=t, qfile=t, pacbio=t)
fastq.info(fastq=perox5b.fastq, fasta=t, qfile=t, pacbio=t)
fastq.info(fastq=perox6a.fastq, fasta=t, qfile=t, pacbio=t)
fastq.info(fastq=perox6b.fastq, fasta=t, qfile=t, pacbio=t)
#Step 2.  Get initial count of sequences per chip.
summary.seqs(fasta=perox1a.fasta)
summary.seqs(fasta=perox1b.fasta)
summary.seqs(fasta=perox2a.fasta)
summary.seqs(fasta=perox2b.fasta)
summary.seqs(fasta=perox3a.fasta)
summary.seqs(fasta=perox3b.fasta)
summary.seqs(fasta=perox4a.fasta)
summary.seqs(fasta=perox4b.fasta)
summary.seqs(fasta=perox5a.fasta)
summary.seqs(fasta=perox5b.fasta)
summary.seqs(fasta=perox6a.fasta)
summary.seqs(fasta=perox6b.fasta)
#Step 3.  Merge files from different rounds of sequencing.
merge.files(input=perox1a.fasta-perox1b.fasta, output=perox1.fasta)
merge.files(input=perox2a.fasta-perox2b.fasta, output=perox2.fasta)
merge.files(input=perox3a.fasta-perox3b.fasta, output=perox3.fasta)
merge.files(input=perox4a.fasta-perox4b.fasta, output=perox4.fasta)
merge.files(input=perox5a.fasta-perox5b.fasta, output=perox5.fasta)
merge.files(input=perox6a.fasta-perox6b.fasta, output=perox6.fasta)
merge.files(input=perox1a.qual-perox1b.qual, output=perox1.qual)
merge.files(input=perox2a.qual-perox2b.qual, output=perox2.qual)
merge.files(input=perox3a.qual-perox3b.qual, output=perox3.qual)
merge.files(input=perox4a.qual-perox4b.qual, output=perox4.qual)
merge.files(input=perox5a.qual-perox5b.qual, output=perox5.qual)
merge.files(input=perox6a.qual-perox6b.qual, output=perox6.qual)
#Step 4.  Get summary of merged sequence files.
summary.seqs(fasta=perox1.fasta)
summary.seqs(fasta=perox2.fasta)
summary.seqs(fasta=perox3.fasta)
summary.seqs(fasta=perox4.fasta)
summary.seqs(fasta=perox5.fasta)
summary.seqs(fasta=perox6.fasta)
#Step 5.  Trim sequences.
trim.seqs(fasta=perox1.fasta, qfile=perox1.qual, oligos=perox1.oligos, checkorient=t, qwindowaverage=25, qwindowsize=50, pdiffs=3, bdiffs=1, maxhomop=6, maxambig=0, minlength=359, maxlength=373, processors=4)
trim.seqs(fasta=perox2.fasta, qfile=perox2.qual, oligos=perox2.oligos, checkorient=t, qwindowaverage=25, qwindowsize=50, pdiffs=3, bdiffs=1, maxhomop=6, maxambig=0, minlength=359, maxlength=373, processors=4)
trim.seqs(fasta=perox3.fasta, qfile=perox3.qual, oligos=perox3.oligos, checkorient=t, qwindowaverage=25, qwindowsize=50, pdiffs=3, bdiffs=1, maxhomop=6, maxambig=0, minlength=359, maxlength=373, processors=4)
trim.seqs(fasta=perox4.fasta, qfile=perox4.qual, oligos=perox4.oligos, checkorient=t, qwindowaverage=25, qwindowsize=50, pdiffs=3, bdiffs=1, maxhomop=6, maxambig=0, minlength=359, maxlength=373, processors=4)
trim.seqs(fasta=perox5.fasta, qfile=perox5.qual, oligos=perox5.oligos, checkorient=t, qwindowaverage=25, qwindowsize=50, pdiffs=3, bdiffs=1, maxhomop=6, maxambig=0, minlength=359, maxlength=373, processors=4)
trim.seqs(fasta=perox6.fasta, qfile=perox6.qual, oligos=perox6.oligos, checkorient=t, qwindowaverage=25, qwindowsize=50, pdiffs=3, bdiffs=1, maxhomop=6, maxambig=0, minlength=359, maxlength=373, processors=4)
#Step 6.  Get summary of sequence files.
summary.seqs(fasta=perox1.trim.fasta)
summary.seqs(fasta=perox2.trim.fasta)
summary.seqs(fasta=perox3.trim.fasta)
summary.seqs(fasta=perox4.trim.fasta)
summary.seqs(fasta=perox5.trim.fasta)
summary.seqs(fasta=perox6.trim.fasta)
#Step 7.  Merge fasta and group files for downstream processing.
merge.files(input=perox1.trim.fasta-perox2.trim.fasta-perox3.trim.fasta-perox4.trim.fasta-perox5.trim.fasta-perox6.trim.fasta, output=perox.trim.fasta)
merge.files(input=perox1.groups-perox2.groups-perox3.groups-perox4.groups-perox5.groups-perox6.groups, output=perox.groups)
#Step 8.  Get a summary of your total sequences.
summary.seqs(fasta=perox.trim.fasta)
#Step 9. Remove mock community
remove.groups(group=perox.groups, fasta=current, name=current, groups=MC)
count.groups(group=current)
#Step 10.  Dereplicate to only unique sequences to make processing faster.
unique.seqs(fasta=current)
#Step 11.  Align sequences and screen out sequences which align poorly.
align.seqs(candidate=current, template=fungal_peroxidase_nt_ref_alignment.fasta, flip=t, processors=8)
summary.seqs(fasta=current, name=current, processors=8)
screen.seqs(fasta=current, group=current, name=current, start=975, end=1431)
summary.seqs(fasta=current, name=current, processors=8)
#Step 12.  Filter.
filter.seqs(fasta=current, vertical=T, processors=8)
#Step 13.  Check for and remove chimeras.  Get a summary post-chimera removal.
chimera.uchime(fasta=current, name=current, group=current, dereplicate=T, processors=8)
remove.seqs(accnos=current, fasta=current, name=current, group=current, dups=f)
summary.seqs(fasta=current, name=current, processors=8)
count.groups(group=current)
#Step 14. Precluster to denoise.
unique.seqs(fasta=current, name=current)
pre.cluster(fasta=current, name=current, diffs=3)
#Step 15. Make count file.
count.seqs(name=current, group=current)
#Step 16. Make distance matrix
dist.seqs(fasta=current, cutoff=0.30, processors=8)
#Step 17. Cluster.  NB: This command will not work correctly with the opticlust defaults in newer versions (1.39+) of mothur.
cluster.split(column=current, count=current, processors=8, cutoff=0.28)
#Step 18. Make shared file.
make.shared(list=current, count=current, label=0.08)
count.groups(shared=current)
#Step 19. Get a representative sequence for each OTU.
get.oturep(fasta=current, count=current, list=current, method=abundance, label=0.08)
#Step 20.  Export the fasta file of representative OTU sequences generated in the previous step and follow the instructions in perox_translation.txt.
#Step 21. Remove singletons from shared file. Import the shared file created at this step into Excel, convert OTU abundances to proportions, and export it for analysis of PERMANOVA.
remove.rare(shared=current, nseqs=1)
#Step 22. Calculate the number of peroxidase OTUs expressed per plot
summary.single(shared=current, calc=sobs, label=0.08)
#Step 23. Tally the abundance of each OTU in each treatment.
merge.groups(shared=current, design=treatment.design)
#Step 24. Make a Venn diagram.  Use the values from this step to generate the Venn diagram figure in R.
venn(shared=current, label=0.08)
#Step 25. Remove plots with fewer than 100 sequences from the singleton free-shared file, subsample, and recaclulate richness. We will use the summary file generated at this step for statistical comparisons of OTU richness.
remove.groups(shared=perox.trim.pick.unique.good.filter.pick.unique.precluster.an.unique_list.0.08.pick.shared, groups=A2-D1-D2)
sub.sample(shared=current)
summary.single(shared=current, calc=sobs, label=0.08)
#end



